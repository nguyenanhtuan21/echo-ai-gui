import { useState } from "react";
import { Menu } from "lucide-react";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import ChatSidebar from "@/components/ChatSidebar";
import ChatMessage from "@/components/ChatMessage";
import ChatInput from "@/components/ChatInput";
import TypingIndicator from "@/components/TypingIndicator";

interface Message {
  id: string;
  role: "user" | "assistant";
  content: string;
  timestamp: string;
}

const Index = () => {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      role: "assistant",
      content: "Xin ch√†o! T√¥i l√† AI assistant c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi c√¢u h·ªèi, vi·∫øt code, gi·∫£i th√≠ch kh√°i ni·ªám, v√† nhi·ªÅu th·ª© kh√°c. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?",
      timestamp: "V·ª´a xong"
    }
  ]);
  const [isTyping, setIsTyping] = useState(false);

  const handleSendMessage = async (content: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content,
      timestamp: "V·ª´a xong"
    };

    setMessages(prev => [...prev, userMessage]);
    setIsTyping(true);

    // Simulate AI response delay
    setTimeout(() => {
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant", 
        content: "C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i tin nh·∫Øn! ƒê√¢y l√† ph·∫£n h·ªìi m·∫´u t·ª´ AI. Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, ƒë√¢y s·∫Ω l√† ph·∫£n h·ªìi t·ª´ m·ªôt m√¥ h√¨nh AI nh∆∞ GPT, Gemini, ho·∫∑c DeepSeek.",
        timestamp: "V·ª´a xong"
      };
      
      setMessages(prev => [...prev, assistantMessage]);
      setIsTyping(false);
    }, 2000);
  };

  return (
    <div className="flex h-screen bg-chat-background">
      {/* Sidebar */}
      <ChatSidebar 
        isOpen={sidebarOpen} 
        onToggle={() => setSidebarOpen(!sidebarOpen)} 
      />

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-chat-border bg-chat-surface">
          <div className="flex items-center gap-3">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="md:hidden hover-glow rounded-lg"
            >
              <Menu className="w-5 h-5" />
            </Button>
            <div>
              <h1 className="text-lg font-semibold text-chat-text">
                Tr√≤ chuy·ªán v·ªõi AI
              </h1>
              <p className="text-sm text-chat-text-muted">
                Powered by AI Technology
              </p>
            </div>
          </div>

          <div className="flex items-center gap-2">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            <span className="text-sm text-chat-text-muted">Tr·ª±c tuy·∫øn</span>
          </div>
        </div>

        {/* Messages */}
        <ScrollArea className="flex-1 p-4">
          <div className="max-w-4xl mx-auto space-y-0">
            {messages.length === 0 ? (
              <div className="flex flex-col items-center justify-center h-full text-center py-12">
                <div className="w-16 h-16 rounded-2xl bg-gradient-primary flex items-center justify-center mb-4 hover-glow">
                  <span className="text-2xl">ü§ñ</span>
                </div>
                <h2 className="text-2xl font-bold chat-gradient-text mb-2">
                  Ch√†o m·ª´ng ƒë·∫øn v·ªõi AI Chat
                </h2>
                <p className="text-chat-text-muted max-w-md">
                  B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán b·∫±ng c√°ch g·ª≠i tin nh·∫Øn. AI s·∫Ω gi√∫p b·∫°n tr·∫£ l·ªùi c√¢u h·ªèi v√† h·ªó tr·ª£ nhi·ªÅu t√°c v·ª• kh√°c nhau.
                </p>
              </div>
            ) : (
              <div className="space-y-0 group">
                {messages.map((message) => (
                  <ChatMessage
                    key={message.id}
                    role={message.role}
                    content={message.content}
                    timestamp={message.timestamp}
                  />
                ))}
                {isTyping && <TypingIndicator />}
              </div>
            )}
          </div>
        </ScrollArea>

        {/* Input */}
        <ChatInput 
          onSend={handleSendMessage}
          disabled={isTyping}
        />
      </div>
    </div>
  );
};

export default Index;